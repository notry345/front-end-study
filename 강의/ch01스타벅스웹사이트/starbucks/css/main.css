/* COMMON */
/* 공통의 스타일 적용 */
body {
  color: #333;
  font-size: 16px;
  font-weight: 400;
  line-height: 1.4;
  font-family: "Nanum Gothic", sans-serif;
  height: 3000px;
}
img {
  display: block;
}
a {
  text-decoration: none;
}
.inner {
  width: 1100px;
  margin: 0 auto;
  position: relative;
}

/* HEADER */
header {
  /* 일반적으로 블록 요소는 가로 너비가 최대한 늘어나려고 한다는 특성을 갖고있지만
  position 값이 fixed와 absolute로 부여되어 있는 요소는 가로 너비가 최소한으로 줄어들려고 시도함
  따라서 width의 기본값 auto에서 100%로 수정해줌으로써 가로 너비 최대한 많이 사용하도록 ㅇㅇ */
  width: 100%;
  background-color: #f6f5f0;
  border-bottom: 1px solid #c8c8c8;
  /* 브라우저의 뷰포트를 기준으로 배치를 하겠다. */
  /* 위치상의 부모 요소로서 기준이 충분히 될 수 있는 상태임
  왜냐면 position에 fixed값이 부여됐응께  */
  /* 다른 요소와 상호작용하지 않고 뷰포트를 기준으로 */
  position: fixed;
  top: 0;
  /* 요소의 쌓임순서 */
  z-index: 9;
}
/* 화면에 중앙으로 가운데 정렬 가능케 해주는 역할 */
/* 헤어의 자식 요소 중 inner 클래스 갖은 요소들 */
header > .inner {
  /* 헤더 중앙 정렬 */
  height: 120px;
}
header .logo {
  /* 요소의 높이를 정확하게 명시해야 브라우저가 계산해줌 */
  height: 75px;
  /* 위치 상의 부모 요소(container)를 기준으로 하여
  inner 영역 내부에 수직 가운데에 배치 */
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  margin: auto;
}
/* SUB MENU */
header .sub-menu {
  display: flex;
}
/* 상위 선택자들을 후손선택자(띄어쓰기)를 사용하여 자세히 명시
-> 나중에 스타일이 중복되는 것 최대한 방지하기 위함 */
header .sub-menu {
  position: absolute;
  top: 10px;
  right: 0;
}
header .sub-menu ul.menu {
  font-family: Arial, sans-serif;
  display: flex;
}
header .sub-menu ul.menu li {
  position: relative;
}
/* 내부의 앞쪽에 가상 인라인 요소(구분선) 추가 */
header .sub-menu ul.menu li::before {
  content: "";
  display: block;
  width: 1px;
  height: 12px;
  background-color: #e5e5e5;
  position: absolute;
  top: 0;
  bottom: 0;
  margin: auto;
}
/* 가장 왼쪽 구분선 안보이게 */
header .sub-menu ul.menu li:first-child:before {
  display: none;
}
header .sub-menu ul.menu li a {
  font-size: 12px;
  /* 사용자가 클릭할 수 있는 영역 늘리기 위함 */
  padding: 11px 16px;
  display: block;
  color: #656565;
}
header .sub-menu ul.menu li a:hover {
  color: #000;
}
/* 검색 부분 */
header .sub-menu .search {
  height: 34px;
  /* 서치 아이콘의 위치 상의 부모 요소가 될 수 있게... */
  position: relative;
}
header .sub-menu .search input {
  width: 36px;
  height: 34px;
  padding: 4px 10px;
  border: 1px solid #ccc;
  box-sizing: border-box;
  border-radius: 5px;
  outline: none;
  background-color: #fff;
  color: #777;
  font-size: 12px;
  transition: width 0.4s;
}
header .sub-menu .search input:focus {
  width: 190px;
  border-color: #669900;
}
/* 돋보기 아이콘 */
header .sub-menu .search .material-icons {
  height: 24px;
  position: absolute;
  /* 수직 가운데 배치 */
  top: 0;
  bottom: 0;
  right: 5px;
  margin: auto;
  transition: 0.4s;
}
/* JS에서 추가해준 클래스 .search에 일치 선택자로 추가 */
header .sub-menu .search.focused .material-icons {
  opacity: 0;
}
/* MAIN MUNU */
header .main-menu {
  /* 위치 상의 부모 요소를 기준으로 배치될 수 있게 */
  position: absolute;
  bottom: 0;
  right: 0;
  z-index: 1;
  display: flex;
}
header .main-menu .item {
}
header .main-menu .item .item__name {
  padding: 10px 20px 34px 20px;
  font-family: Arial, sans-serif;
  font-size: 13px;
}
/* item__name뿐만 아니라 item_contents에도 영향끼치기 때문에
:hover라는 가상 클래스 선택자를 item 자체에다가 부여 */
header .main-menu .item:hover .item__name {
  background-color: #2c2a29;
  color: #669900;
  border-radius: 6px 6px 0 0;
}
header .main-menu .item .item__contents {
  width: 100%;
  position: fixed;
  left: 0;
  display: none;
}
header .main-menu .item:hover .item__contents {
  /* 마우스를 올리면 디스플레이가 블록으로 바뀌면서 화면에 출력될 수 있는 구조가 됨 */
  display: block;
}
header .main-menu .item .item__contents .contents__menu {
  background-color: #2c2a29;
}
/* 자식선택자로 ul 태그 명시 -> 모든 하위요소 말고 자식만! 선택되게 */
/* 같은 요소 (이 경우 ul)를 여러 depth로 겹쳐서 사용할 경우 자식선택자 사용 권장 */
header .main-menu .item .item__contents .contents__menu > ul {
  display: flex;
  padding: 20px 0;
}
header .main-menu .item .item__contents .contents__menu > ul > li {
  width: 220px;
}
header .main-menu .item .item__contents .contents__menu > ul > li h4 {
  padding: 3px 0 12px 0;
  font-size: 14px;
  color: #fff;
}
/* 구조가 복잡해지는만큼 선택자도 점점 길어지게 됨 */
header .main-menu .item .item__contents .contents__menu > ul > li ul li {
  padding: 5px 0;
  font-size: 12px;
  color: #999;
  cursor: pointer;
}

header .main-menu .item .item__contents .contents__menu > ul > li ul li:hover {
  color: #669900;
}
header .main-menu .item .item__contents .contents__texture {
  padding: 26px 0;
  /* 기본적으로 글자와 관련된 내용은 상속됨! */
  font-size: 12px;
  background-image: url("../images/main_menu_pattern.jpg");
}
header .main-menu .item .item__contents .contents__texture h4 {
  color: #999;
  font-weight: 700;
  font-size: 12px;
}

header .main-menu .item .item__contents .contents__texture p {
  color: #669900;
  margin: 4px 0 14px;
}
/* BADGE */
header .badges {
  /* 부모 요소(header)를 기준으로 배치 */
  position: absolute;
  top: 132px;
  right: 12px;
}
header .badges .badge {
  /* div 요소 자체의 테두리 둥글게 깎음 */
  border-radius: 10px;
  /* div 요소 안에 들어있는 이미지가 모서리 밖으로 넘치지 않게 */
  overflow: hidden;
  margin-bottom: 12px;
  /* 그림자 넣기 */
  box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.15);
  /* 마우스 커서 모양 설정 -> 사용자에게 누를 수 있는 요소라고 인식될 수 있도록 */
  cursor: pointer;
}
/* SECTION (VISUAL) */
.visual {
  /* 헤더의 높이값 */
  margin-top: 120px;
  background-image: url("../images/visual_bg.jpg");
  background-position: center;
}
.visual .inner {
  height: 646px;
}
.visual .title {
  /* 부모 요소를 기준으로 배치하겠다. */
  position: absolute;
  top: 88px;
  left: -10px;
}
.visual .title .btn {
}
/* 일치 선택자 */
.visual .cup1.image {
  position: absolute;
  top: 0;
  right: -47px;
}
.visual .cup1.text {
  position: absolute;
  top: 38px;
  right: 171px;
}
.visual .cup2.image {
  position: absolute;
  bottom: 0;
  right: 162px;
}
.visual .cup2.text {
  position: absolute;
  top: 321px;
  right: 416px;
}
.visual .spoon {
  position: absolute;
  bottom: 0;
  left: 275px;
}
