> CSS 기본 문법

HTML로 잡은 구조를 보기 좋게 꾸며주는 역할
즉, 스타일을 작업하는 것
선택자로 특정한 HTML 요소들을 선택하여 {} 사이에 들어있는 CSS 내용을 적용시킴

선택자 { 속성: 값; }
선택자 { 속성: 값; 속성: 값; }

선택자(selector) : 스타일(CSS)을 적용할 대상
속성(property) : 스타일(CSS)의 종류
값(value) : 스타일(CSS)의 값
{ } : 스타일 범위의 시작과 끝
여러가지 속성과 값의 세트들을 하나 이상 넣을 수 있음

/* 주석 작성 */
선택자 {
  속성: 값;
}
들여쓰기(indent)와 내어쓰기(outdent)를 적용하여 알아보기 쉽게

div { color: red; margin: 20px; }
div라는 태그 선택자를 통하여
HTML에서 div라는 태그를 찾아서 색상과 외부여백에 주어진 값을 적용시킴


> CSS 선언 방식

1. 내장 방식

<style></style>의 콘텐츠로 스타일(CSS 문법)을 작성하는 방식
HTML 문서 내부의 head 영역에 작성
별도의 CSS 파일을 만들지 않아도 된다는 장점이 있으나
CSS 내용을 HTML 파일 안에 담아서 관리한다는 것은 유지 보수 측면에서 단점이 많음
권장 X

<style>
  div {
    color: red;
    margin: 20px;
  }
</style>

2. 링크 방식

<link />로 외부 CSS 문서를 가져와서 연결하는 방식
"병렬 방식" (import방식과 다름)

- HTML 파일에는 다음과 같이 작성
<link rel="stylesheet" href="./css/main.css">

- main.css에는 다음과 같이 작성
div {
  color: red;
  margin: 20px;
}

3. 인라인 방식

전역 속성 중 하나인 요소의 style 속성에 직접 스타일을 작성하는 방식
해당 요소를 직접적으로 찾아서 속성을 추가하는 것이기 때문에 선택자가 없음
너무 지나치게 우선시되기 때문에 수정이 어려울 수 있음

<div style="color: red; margin: 20px;"></div>

4. @import 방식

CSS의 @import 규칙으로 CSS 문서 안에서 또 다른 CSS 문서를 가져와 연결하는 방식
HTML에서 CSS를 가져와 연결하는 것이 링크방식,
이 상태에서 CSS 문서(main.css) 안에서 또 다른 CSS 문서(box.css)를 가져와 연결하는 것이 @import 방식
"직렬 방식"
- 직렬 방식의 장점이자 단점은 main.css가 HTML에 연결되어 실제 코드가 해석되기 전까지는
  import라는 코드 또한 해석되기 전이기 때문에 box.css는 HTML에 연결이 되지 못하고 적용될 수 없다는 것임
- 이러한 특성을 이용하여 일부러 연결을 지연시키려는 의도로 사용할 수 있으나
  연결이 실제로 지연된다는 단점이 존재함

import 규칙이란?

- HTML 파일에는 다음과 같이 작성
<link rel="stylesheet" href="./css/main.css">

- main.css에는 다음과 같이 작성
@import url("./box.css");
div {
  color: red;
  margin: 20px;
}

- box.css에는 다음과 같이 작성
.box {
  background-color: red;
  padding: 20px;
}


> CSS 선택자

1. 기본 (selector)

1.1) * : 전체 선택자 (universal selector)
모든 요소를 선택함
특정 범위 안에 있는 모든 요소를 선택하는 개념으로 간혹 씀
단독으로는 거의 안쓰이고 복합 선택자를 통해서 다른 선택자와 혼합하여 씀

* {
  color: red;
}

1.2) ABC : 태그 선택자 (type selector)
태그 이름이 ABC인 요소 선택

div {
  color: red;
}

1.3) .ABC : 클래스 선택자 (class selector)
HTML 전역 속성이자 중복 가능한 속성인 class 속성의 값이 ABC인 요소 선택
서로 다른 태그를 갖고 있는 요소도 클래스 이름이 같으면 함께 선택 가능


- HTML 파일에 다음과 같이 작성
<li class="red">예제입니다</li>
<span class="red>예제라구요</span>

- CSS 파일에 다음과 같이 작성
.red {
  color: red;
}

1.4) #ABC : 아이디 선택자 (ID selector)
HTML 전역 속성이자 중복이 불가능한 속성인 id 속성의 값이 ABC인 요소 선택

- HTML 파일에 다음과 같이 작성
<li id="myUniqueID" class="red">예제라니까요?</li>

- CSS 파일에 다음과 같이 작성
#myUniqueID {
  color: blue;
}

2. 복합 (combinator)

2.1) ABCXYZ : 일치 선택자 (basic combinator)
선택자 ABC와 XYZ를 동시에 만족하는 요소 선택
태그 선택자에는 별도의 기호가 안붙기 때문에 항상 맨 앞부분에 써줘야 함

- HTML 파일에 다음과 같이 작성
<div>
  <ul>
    <li>월</li>
    <li>화</li>
    <li class="orange">수</li>
  </ul>
  <div>목</div>
  <p>금</p>
  <span class="orange">토</span>
</div>
<span class="orange">일</span>

- CSS 파일에 다음과 같이 작성
/* span이라는 태그 선택자와 .orange라는 클래스 선택자 동시 사용 */
span.orange {
  color: red;
}

2.2) ABC>XYZ : 자식 선택자 (child combinator)
선택자 ABC의 자식 요소 XYZ 선택
ABC는 XYZ의 부모 요소여야 함
뒤에서부터 해석하는 것이 이해하기 좋음

/* ul 태그를 찾아서 그 자식 요소 중 클래스가 orange인 요소를 찾음 */
ul > .orange {
  color: red;
}

2.3) ABC XYZ : 하위(후손) 선택자 (descendant combinator)
선택자가 ABC의 하위 요소 XYZ 선택
공백문자가 선택자의 기호임
일반적으로 자식 선택자보다 많이 씀

div .orange {
  color: red;
}

우리는 뒤에서부터 해석하면 좋음
(클래스가 orange요소 찾은 후 그 중 div라는 조상 요소를 갖는 요소 찾기)

2.4) ABC + XYZ : 인접 형제 선택자 (adjacent sibling combinator)
선택자 ABC의 다음 형제 요소 XYZ 하나를 선택
형제란 같은 부모를 공유하는 요소들
일반 형제 선택자보다 많이 사용

- HTML 파일에 다음과 같이 작성
<ul>
  <li>월</li>
  <li>화</li> /* 이전 형제 */
  <li class="orange">수</li>
  <li>목</li> /* 다음 형제 */
  <li>금</li>
</ul>

- CSS 파일에 다음과 같이 작성
/* orange라는 클래스를 가진 요소의 다음 형제 요소인 '목'만 선택됨 */
.orange + li {
  color: red;
}

2.5) ABC ~ XYZ : 일반 형제 선택자 (general sibling combinator)
선택자 ABC의 다음 형제 요소 XYZ 모두를 선택

/* orange라는 클래스를 가진 요소의 다음 형제 요소들인 '목'과 '금'이 선택됨 */
.orange ~ li {
  color: red;
}

3. 가상 클래스 (pseudo-classes)
사용자가 어떠한 행동을 했을 때 동작하는 개념
일반적으로 동작은 자바스크립트에서 다루지만..

3.1) ABC:hover
선택자 ABC 요소에 마우스 커서가 올라가 있는 동안 선택

a:hover {
  color: red;
}

3.2) ABC:active
선택자 ABC 요소에 마우스를 클릭하고 있는 동안 선택

a:active {
  color: red;
}

3.3) ABC:focus
선택자 ABC 요소가 포커스되면 선택
)!!!포커스 될 수 있는 요소는?
- input, a, button, label, select 등 HTML 대화형 콘텐츠가 이에 해당
- 포커스가 가능하지 않은 요소를 포커스가 가능한 형태로 만드려면 
  해당 요소 속성에 tabindex="-1" 추가
- 포커스는 하나의 페이지에서 한 요소에만 가능하다는 점 기억
- 때문에 포커스가 한 요소에 잡혀있다가도 다른 요소로 넘어가면 자동으로 해당 요소에서 포커스가 해제됨

input:focus {
  background-color: orange;
}

3.4) ABC:first-child
선택자 ABC가 형제 요소 중 첫째라면 선택
형제 요소들 중 ABC가 첫 번째인 경우에만 선택

- HTML 파일
<div class="fruits">
  <span>berry</span>
  <span>watermelon</span>
  <div>orange</div>
  <p>orange</p>
  <h3>orange</h3>
</div>

- CSS 파일
/* fruits라는 클래스를 갖고 있는 요소의 하위 요소 중 span 태그를 갖은 요소들을 찾고
    그 형제 요소들 중 첫째인지 확인하는 선택자임 */
.fruits span:first-child {
  color: red;
}

마찬가지로 뒤에서부터 읽어나가면 편함

3.5) ABC:last-child
선택자 ABC가 형제 요소 중 막내라면 선택

.fruits h3:last-child {
  color-red;
}

3.6) ABC:nth-child(n)
선택자 ABC가 형제 요소 중 (n)째라면 선택
괄호 안에 숫자뿐만이 아니라 숫자와 함께 n이라는 키워드도 사용 가능
- 이 n이라는 키워드는 숫자를 0부터 세기 시작 (zero-based numbering)

/* fruits라는 클래스를 가진 요소의 하위 요소들을 모두 선택하되
    두번째 형제 요소를 선택 */
.fruits *:nth-child(2) {
  color: green;
}

.fruits *:nth-child(n+1) {
  font-weight: 700;
}

3.7) ABC:not(XYZ) : 부정 선택자(negation)
선택자 XYZ가 아닌 ABC 요소 선택

.fruits *:not(span) {
  background-color: yellow;
}

4. 가상 요소 (pseudo-elements)
가상의 요소를 사용하여 CSS에서 제어를 하면
HTML의 구조를 조금 더 단순화할 수 있어서 유용함

4.1) ABC::before
선택자 ABC 요소의 내부 앞에 내용(content)을 삽입
삽입된 위치에 해당하는 가상 요소는 인라인 요소임
before와 after는 실제로 요소를 삽입해야 하는 선택자이기 때문에
CSS 속성 중 content라는 속성을 이용하여
삽입할 요소의 내용이 무엇인지 무조건 명시를 해줘야함 (""를 비워두는 한이 있더라도)

- HTML
<div class="box">여기에콘텐츠</div>

- CSS
.box::before {
  content: "추가요~";
}

4.2) ABC::after
선택자 ABC 요소의 내부 뒤에 내용(content)을 삽입

.box::after {
  content: "뒤!";
}

RV) 인라인 요소는 가로 세로 값을 지정해도 실제로 적용이 안되는 특성을 갖고 있다
특정한 인라인 요소에 가로 세로 값을 부여해 주고 싶으면 블록 요소로 전환해 주어야 함
display라는 CSS 속성을 통해 바꿀 수 있다
display: block;

5. 속성 (attribute)

5.1) [ABC]
속성 ABC를 포함한 요소 선택
특이한 속성을 갖고 있는 요소를 찾기에 적합
값이 아니라 속성의 이름만 명시하기 때문에 많은 요소가 갖고 있는 속성을 기준으로 어떤 요소를 특정에서 찾기에는 적합 X

- HTML
<input type="text" value="NOTRY">
<input type="password" value="1234">
<input type="text" value="!@#$" disabled>
cf) input의 type 속성을 password로 설정해주면 화면에 보이는 내용만 점으로 대체해줌

- CSS
[disabled] {
  color: red;
}
[type] {
  color: blueviolet;
}

5.2) [ABC="XYZ"]
속성 ABC를 포함하고 그 값이 XYZ인 요소 선택
따옴표 생략 가능하지만 붙이는 거 권장

[type="number"] {
  color: blue;
}


> CSS의 스타일 상속

적용된 CSS 내용이 해당 요소의 자식 요소는 물론, 하위 요소들에게까지 영향을 미치는 것
상속되는 CSS 속성들은 정해져 있음 (대부분의 글자,문자와 관련되어 있는 속성들)
font-style : 글자 기울기
font-weight : 글자 두께
font-size : 글자 크기
line-height : 줄 높이
font-family : 폰트, 서체
color : 글자 색상
text-align : 정렬

강제 상속

실질적으로 상속이 되지 않는 CSS 내용도 강제적으로 상속시키는 것
기본적으로 상속이 되지 않는 속성이지만 값을 inherit으로 지정함으로써 부모 요소로부터 강제로 상속받게 할 수 있음


> 선택자 우선순위

우선순위란?
: 같은 요소가 여러 선언의 대상이 된 경우,
  어떤 선언의 CSS 속성을 우선 적용할지 결정하는 방법
1. 점수가 높은 선언이 우선시됨
2. 점수가 같으면, 가장 마지막에 해석된 선언이 우선시됨

명시도 : CSS 우선순위의 점수를 계산하는 것
중요도 : !important가 붙는..
선언 순서 : 코드가 해석된/해석되는 순서

!important - 99999999점
인라인 선언 - 1000점
ID 선택자 - 100점
Class 선택자 - 10점
태그 선택자 - 1점
전체 선택자 - 0점
상속 - 점수를 별도로 계산 하지 않음

div {color: red !important;}
#color_yellow {color: yellow;}
.color_green {color: green;}
div {color: blue;}
* {color: darkblue;}
body {color: violet;}

연습용 문제

.list li.item {color:red;} 21점
- 후손(클래스 일치(태그+클래스))
.list li:hover {color:red;} 21점
- 후손 (클래스 태그+가상클래스)
- 가상클래스 선택자도 결국에는 클래스 선택자임
.box::before {content:"Good"; color:red;} 21점
- 클래스+가상요소
- 가상요소 선택자도 태그 선택자와 같은 우선순위 가짐
#submit span {color:red;} 101점
- 후손(ID 태그)
header .menu li::nth-child(2) {color:red;} 22점
- 후손(태그 후손(클래스 태그+가상클래스))
h1 {color:red;} 1점
- 태그
:not(.box) {color:red;} 10점
- 가상클래스 선택자 중 부정 선택자(not)는 점수 계산 X
- 부정(클래스)

cf) 
- 사실 ID는 고유해야 하기 때문에
  화면에 특별하게 고유한 요소를 지정하지 않는 한 ID 선택자는 자주 사용 X
- 인라인 선언 방식을 통해 작성한 CSS 스타일은 쓸데없이 높은 우선순위를 갖기 때문에
  CSS 파일에서 수정이 불가능한 상태가 되버리기 때문에(!important 쓰는 방법은 가능) 되도록 지양
- !important를 붙이는 방법도 최대한 지양할 것
  한번 붙이기 시작하면 다른 방식으로 스타일을 덮어써서 수정을 할 수 없게 되기 때문